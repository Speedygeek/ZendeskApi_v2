# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

resources:
- repo: self
variables:
  - name: BuildConfiguration
    value: 'Release'
  - name: TF_BUILD
    value: 'true'
  #- name: System.Debug
  #  value: true
  - name: DOTNET_CLI_TELEMETRY_OPTOUT
    value: true
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
    value: true
  - group: GitHub_Feed
  - group: Zendesk_Creds

trigger:
  batch: true
  branches:
    include:
      - main
      - refs/tags/*
pr:
  branches:
    include:
    - main
  paths:
    exclude:
    - docs/*

pool:
  vmImage: 'windows-latest'

jobs:
- job: Build
  displayName: Build and Test
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: sdk
      useGlobalJson: true
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      command: build
      projects: 'src/ZendeskApi_v2.sln'
      arguments: '-c $(BuildConfiguration)'
    env:
      TF_BUILD: true

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test'
    inputs:
      command: test
      projects: 'tests/ZendeskApi_v2.Tests/ZendeskApi_v2.Tests.csproj'
      arguments: '--no-build -c $(BuildConfiguration)'
    env:
      admin__id: $(Admin.ID)
      admin__email: $(Admin.Email)
      admin__password: $(Admin.Password)
      admin__apiToken: $(Admin.ApiToken)

  - task: DotNetCoreCLI@2
    displayName: 'dotnet pack'
    inputs:
      command: pack
      searchPatternPack: 'src/ZendeskApi_v2/ZendeskApi_v2.csproj'
      nobuild: true

  - task: PowerShell@2
    inputs:
      filePath: .\ci\sign-package.ps1
    env:
      SignClientUser: $(speedygeek.signClientUser)
      SignClientSecret: $(speedygeek.signClientSecret)
    displayName: 'Authenticode sign packages'
    condition: and(succeeded(), ne(variables['speedygeek.signClientUser'], ''), ne(variables['speedygeek.signClientSecret'], ''))

  - task:  PublishPipelineArtifact@1
    displayName: 'Publish Artifact: Nuget_Package'
    inputs:
      TargetPath:  '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'Nuget_Package'

- job: Publish
  displayName: Publish Nuget packages
  dependsOn: Build
  condition: and(succeeded(),or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/tags/v3.')))
  steps:
  - checkout: none
  - task: DownloadPipelineArtifact@2
    inputs:
      path: $(Pipeline.Workspace)/Nuget_Package
      artifact: 'Nuget_Package'

  - task: PowerShell@2
    displayName: 'Is Pre-release'
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $buildNumber = $env:Build_BuildNumber

        $IsPrerelease = $false;
        if( $buildNumber.Contains("-") -or $buildNumber.Contains("+")){
          $IsPrerelease = $true;
        }

        Write-Host "IsPrerelease: $IsPrerelease "
        Write-Host "##vso[task.setvariable variable=IsPrerelease]$IsPrerelease"

        $date=$(Get-Date -Format "dd MMMM yyyy");
        Write-Host "##vso[task.setvariable variable=ReleaseDate]$date"

  - task: PowerShell@2
    displayName: 'GitHub Feed (Pre-release)'
    condition: and(succeeded(),eq(variables['IsPrerelease'] ,'True'))
    env:
      apikey: $(github_feed_apikey)
    inputs:
      targetType: inline
      script: |
        Write-Host -ForegroundColor Cyan "starting github push"
        $api = "$Env:apikey"
        $url =  "$Env:github_feed_url"
        Write-Host -ForegroundColor Cyan "Feed url $url"
        Write-Host -ForegroundColor Cyan "api key length is " $api.Length
        dotnet nuget push "$(Pipeline.Workspace)/**/*.nupkg" --skip-duplicate -k "$api"  -s "$url"

      showWarnings: true
      pwsh: true

  - task: NuGetCommand@2
    displayName: 'MyGet Feed (Pre-release)'
    condition: and(succeeded(), eq(variables['IsPrerelease'] ,'True'))
    inputs:
      command: push
      packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
      nuGetFeedType: external
      publishFeedCredentials: MyGet

  - task: NuGetCommand@2
    displayName: 'NuGet push'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v3.'),eq(variables['IsPrerelease'] ,'False'))
    inputs:
      command: push
      packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
      nuGetFeedType: external
      publishFeedCredentials: Nuget.org

  - task: GitHubRelease@1
    displayName: 'Create GitHub Release'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v3.'),eq(variables['IsPrerelease'] ,'False'))
    inputs:
      gitHubConnection: Github
      repositoryName: 'Speedygeek/ZendeskApi_v2'
      tagSource: gitTag
      title: '$(Build.BuildNumber) ($(ReleaseDate))'
      releaseNotesSource: inline
      assets: '$(Pipeline.Workspace)/**/*.nupkg'
      isDraft: true
